
======= corruption.sol:CorruptedState =======
EVM assembly:
  mstore(0x40, 0x80)
  callvalue
  dup1
  iszero
  tag_1
  jumpi
  0x00
  dup1
  revert
tag_1:
  pop
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
      mstore(0x40, 0x80)
      callvalue
      dup1
      iszero
      tag_1
      jumpi
      0x00
      dup1
      revert
    tag_1:
      pop
      jumpi(tag_2, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0x9f94c670
      eq
      tag_3
      jumpi
      dup1
      0xc3027525
      eq
      tag_4
      jumpi
    tag_2:
      0x00
      dup1
      revert
    tag_3:
      tag_5
      0x04
      dup1
      calldatasize
      sub
      0x40
      dup2
      lt
      iszero
      tag_6
      jumpi
      0x00
      dup1
      revert
    tag_6:
      dup2
      add
      swap1
      dup1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
      tag_7
      jump	// in
    tag_5:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
    tag_4:
      tag_8
      tag_9
      jump	// in
    tag_8:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
    tag_7:
      0x00
      0x60
      dup4
      mload(0x40)
      swap1
      dup1
      dup3
      mstore
      dup1
      0x20
      mul
      0x20
      dup2
      div
      dup3
      eq
      tag_11
      jumpi
      invalid
    tag_11:
      0x20
      add
      dup3
      add
      0x40
      mstore
      dup1
      iszero
      tag_12
      jumpi
      dup2
      0x20
      add
      0x20
      dup3
      mul
      dup1
      calldatasize
      dup4
      calldatacopy
      dup1
      dup3
      add
      swap2
      pop
      pop
      swap1
      pop
    tag_12:
      pop
      swap1
      pop
      tag_13
      tag_14
      jump	// in
    tag_13:
      0x00
      dup1
      caller
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      mstore
      0x20
      add
      swap1
      dup2
      mstore
      0x20
      add
      0x00
      keccak256
      mload(0x40)
      dup1
      0x40
      add
      0x40
      mstore
      swap1
      dup2
      0x00
      dup3
      add
      sload
      dup2
      mstore
      0x20
      add
      0x01
      dup3
      add
      sload
      dup2
      mstore
      pop
      pop
      swap1
      pop
      dup4
      dup3
      0x02
      dup2
      mload
      dup2
      lt
      tag_15
      jumpi
      invalid
    tag_15:
      0x20
      mul
      0x20
      add
      add
      dup2
      dup2
      mstore
      pop
      pop
      dup1
      0x00
      dup1
      caller
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      mstore
      0x20
      add
      swap1
      dup2
      mstore
      0x20
      add
      0x00
      keccak256
      0x00
      dup3
      add
      mload
      dup2
      0x00
      add
      sstore
      0x20
      dup3
      add
      mload
      dup2
      0x01
      add
      sstore
      swap1
      pop
      pop
      0x00
      dup1
      caller
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      mstore
      0x20
      add
      swap1
      dup2
      mstore
      0x20
      add
      0x00
      keccak256
      0x00
      add
      sload
      swap3
      pop
      pop
      pop
      swap3
      swap2
      pop
      pop
      jump	// out
    tag_9:
      0x00
      dup1
      0x00
      caller
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      mstore
      0x20
      add
      swap1
      dup2
      mstore
      0x20
      add
      0x00
      keccak256
      0x00
      add
      sload
      swap1
      pop
      swap1
      jump	// out
    tag_14:
      mload(0x40)
      dup1
      0x40
      add
      0x40
      mstore
      dup1
      0x00
      dup2
      mstore
      0x20
      add
      0x00
      dup2
      mstore
      pop
      swap1
      jump	// out

    auxdata: 0xa2646970667358221220e4b03bb44f2efcf9f84c051bd334f28f012f8d73fc98b05bb05d10c8c5bd11f164736f6c63782b302e362e352d646576656c6f702e323032302e332e32382b636f6d6d69742e34613764326535392e6d6f64005c
}

